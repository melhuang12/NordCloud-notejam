---
# Cloudformation template for ec2 instances on app tier in an ASG group
AWSTemplateFormatVersion: "2010-09-09"
Description: This template deploys notejam's app/db/presentation tier

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: notejam

  SSHKey:
    Description: SSH keypair used when launching ec2 instances
    Type: String
    Default: notejam

  InstanceType:
    Description: Type of EC2 instance launched
    Type: String
    Default: t2.micro

  AmiType:
    Description: AMI image type on ca-central-1, default to Amazon Linux
    Type: String
    Default: ami-054362537f5132ce2

  UserPassword:
    Description: Master User password
    Type: String
    Default: SecretPassword01
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: Only alphanumeric characters allowed

  DBInstanceSize:
    Description: The size of the RDS Size
    Type: String
    Default: small

Resources:
  PresentationELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: true
      Subnets:
        - { "Fn::ImportValue": !Sub "${EnvironmentName}-PublicSubnet1" }
        - { "Fn::ImportValue": !Sub "${EnvironmentName}-PublicSubnet2" }
      Listeners:
        - Protocol: HTTP
          InstancePort: 80
          LoadBalancerPort: 80
          InstanceProtocol: HTTP
      HealthCheck:
        HealthyThreshold: 2
        Interval: 30
        Target: "HTTP:80/"
        Timeout: 5
        UnhealthyThreshold: 3
      SecurityGroups:
        - { "Fn::ImportValue": !Sub "${EnvironmentName}-PresentationELBSG" }

  AppLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    # Metadata:
    #   AWS::CloudFormation::Init:
    #     configSets:
    #       InstallAndRun:
    #         - install-requirements
    #         - upload-files
    #     install-requirements:
    #       files:
    #         /var/www/html/flask.zip:
    #           source: https://nordcloud-notejam.s3.ca-central-1.amazonaws.com/flask.zip
    #           mode: 000400
    #           owner: root
    #       commands:
    #         00-unzip:
    #           command: "unzip flask.zip"
    #           cwd: "/var/www/html/"
    #         01-install-requirements:
    #           command: "pip install -r requirements.txt"
    #           cwd: "/var/www/html/flask/"
    #         02-make-dir-sites-avail:
    #           command: "mkdir /etc/nginx/sites-available/"
    #         03-make-dir-sites-enable:
    #           command: "mkdir /etc/nginx/sites-enabled"
            # 02-create-database-schema:
            #   command: "python db.py"
            #   cwd: "/var/www/html/flask/"
            # 03-start-flask-web-server:
            #   command: "python runserver.py"
            #   cwd: "/var/www/html/flask/"
        # upload-files:
        #   files:
        #     /etc/systemd/system/runserver.service:
        #       source: https://nordcloud-notejam.s3.ca-central-1.amazonaws.com/runserver.service
        #       mode: 00400
        #       owner: root
        #     /etc/nginx/sites-available/runserver:
        #       source: https://nordcloud-notejam.s3.ca-central-1.amazonaws.com/runserver
        #       mode: 00400
        #       owner: root
        #   commands:
        #     01-start-gunicorn-service:
        #       command: "echo here we goooooo" #"systemctl start runserver"
            # 02-enable-gunicorn-service:
            #   command: "systemctl enable runserver"
            # 03-enable-nginx-server-block:
            #   command: "ln -s /etc/nginx/sites-available/runserver /etc/nginx/sites-enabled/runserver"
            # 04-restart-nginx:
            #   command: "systemctl restart nginx"
            # 05-adjust-firewall:
            #   command: "ufw allow 'Nginx Full'"
    Properties:
      SecurityGroups:
        - { "Fn::ImportValue": !Sub "${EnvironmentName}-AppSG" }
      InstanceType: !Ref InstanceType
      ImageId: !Ref AmiType
      KeyName: !Ref SSHKey
      UserData:
        !Base64 |
        #!/bin/bash -xe
        yum -y update
        amazon-linux-extras install epel
        yum install -y git
        yum install -y httpd
        service httpd start
        yum install -y mod_wsgi
        yum install -y python-pip
        pip install virtualenv

        git clone https://github.com/nordcloud/notejam.git /var/www/html

        chown -R root:root /var/www/html

        # cd /var/www/html/ && \
        # virtualenv --python=python3.0 flask && \
        # cd /var/www/html/flask && \
        # source bin/activate && \
        pip install -r requirements.txt


        echo 'import sys' >> /var/www/html/flask/wsgi.py
        echo 'import site' >> /var/www/html/flask/wsgi.py
        echo 'site.addsitedir("/usr/lib/python2.7/site-packages")' >> /var/www/html/flask/wsgi.py
        echo 'sys.path.insert(0, "/var/www/html/flask")' >> /var/www/html/flask/wsgi.py
        echo 'from notejam import app as application' >> /var/www/html/flask/wsgi.py
        echo 'application.root_path = "/var/www/html/flask"' >> /var/www/html/flask/wsgi.py


        echo '<VirtualHost *:80>' >> /etc/httpd/conf/httpd.conf
        echo '       ServerName '$(hostname) >> /etc/httpd/conf/httpd.conf
        echo '       WSGIDaemonProcess flask user=root group=root threads=5' >> /etc/httpd/conf/httpd.conf
        echo '       WSGIScriptAlias / /var/www/html/flask/wsgi.py' >> /etc/httpd/conf/httpd.conf
        echo '       <Directory /var/www/html/flask/>' >> /etc/httpd/conf/httpd.conf
        echo '            WSGIProcessGroup flask'  >> /etc/httpd/conf/httpd.conf
        echo '            WSGIApplicationGroup %{GLOBAL}'  >> /etc/httpd/conf/httpd.conf
        echo '            Order allow,deny'  >> /etc/httpd/conf/httpd.conf
        echo '            Allow from all'  >> /etc/httpd/conf/httpd.conf
        echo '       </Directory>' >> /etc/httpd/conf/httpd.conf
        echo '       Alias "/static/" "/var/www/html/flask/notejam/static/"' >> /etc/httpd/conf/httpd.conf
        echo '       <Directory /var/www/html/flask/notejam/static/>' >> /etc/httpd/conf/httpd.conf
        echo '            Order allow,deny' >> /etc/httpd/conf/httpd.conf
        echo '            Allow from all' >> /etc/httpd/conf/httpd.conf
        echo '       </Directory>' >> /etc/httpd/conf/httpd.conf
        echo '</VirtualHost>' >> /etc/httpd/conf/httpd.conf

        systemctl restart httpd
        # systemctl restart httpd
        # 'Fn::Join':
        #   - ''
        #   - - |
        #       #!/bin/bash -xe
        #     - |
        #     - 'yum update -y'
        #     - |+
        #
        #     - |
        #     - 'yum install -y python-pip'
        #     - |+
        #
        #     - |
        #     - 'amazon-linux-extras install -y nginx1'
        #     - |+
        #
        #     - |
        #     - '/opt/aws/bin/cfn-init -v '
        #     - '         --stack '
        #     - !Ref 'AWS::StackName'
        #     - '         --resource AppLaunchConfiguration '
        #     - '         --configsets InstallAndRun '
        #     - '         --region '
        #     - !Ref 'AWS::Region'
        #     - |+
        #
        #     - |
        #     - '/opt/aws/bin/cfn-signal -e $? '
        #     - '         --stack '
        #     - !Ref 'AWS::StackName'
        #     - '         --resource AppASG '
        #     - '         --region '
        #     - !Ref 'AWS::Region'
        #     - |+

  AppASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref AppLaunchConfiguration
      MinSize: 2
      MaxSize: 4
      AvailabilityZones:
        - { "Fn::ImportValue": !Sub "${EnvironmentName}-AvailabilityZone1" }
        - { "Fn::ImportValue": !Sub "${EnvironmentName}-AvailabilityZone2" }
      VPCZoneIdentifier:
        - { "Fn::ImportValue": !Sub "${EnvironmentName}-PrivateSubnet1" }
        - { "Fn::ImportValue": !Sub "${EnvironmentName}-PrivateSubnet2" }
      LoadBalancerNames:
        - !Ref PresentationELB

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      AutoScalingGroupName: !Ref AppASG
      Cooldown: 30
      ScalingAdjustment: 1

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 10
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: 60
      AlarmActions:
      - !Ref ScaleUpPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AppASG
      Namespace: AWS/EC2
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  # DBSubnet:
  #   Type: AWS::RDS::DBSubnetGroup
  #   Properties:
  #     DBSubnetGroupDescription: DB Subnet group, required for the DBInstance to be part of the VPC
  #     SubnetIds:
  #       - { "Fn::ImportValue": !Sub "${EnvironmentName}-PrivateSubnet1" }
  #       - { "Fn::ImportValue": !Sub "${EnvironmentName}-PrivateSubnet2" }
  #     Tags:
  #       - Key: Name
  #         Value: DBSubnetGroupName

  # MyDB:
  #   Type: AWS::RDS::DBInstance
  #   DeletionPolicy: Snapshot
  #   Properties:
  #     DBSubnetGroupName: !Ref DBSubnet
  #     VPCSecurityGroups:
  #       - { "Fn::ImportValue": !Sub "${EnvironmentName}-DataBaseSG" }
  #     AllocatedStorage: '10'
  #     DBInstanceClass: db.t3.small
  #     Engine: MySQL
  #     EngineVersion: 8.0.16
  #     LicenseModel: general-public-license
  #     MasterUsername: master
  #     MasterUserPassword: !Ref UserPassword

Outputs:
  PresentationELB:
    Description: PresentationELB
    Value: !Ref PresentationELB
    Export:
      Name: !Sub ${EnvironmentName}-PresentationELB
